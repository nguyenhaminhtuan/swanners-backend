service: swanners

provider:
  name: aws
  stage: ${opt:stage, 'dev'}
  region: ap-southeast-1
  runtime: nodejs12.x
  lambdaHashingVersion: 20201221
  apiName: ${opt:stage, self:provider.stage, 'dev'}
  environment:
    S3_BUCKET: ${self:custom.bucket}
    COGNITO_USER_POOL: ${self:custom.userPool}
    AUTH_ISSUER: ${env:AUTH_ISSUER}
    DATABASE_URL: ${env:DATABASE_URL}

useDotenv: true

custom:
  bucket: ${self:service}-${self:provider.stage}
  userPool: ${self:service}-${self:provider.stage}
  webpack:
    includeModules:
      forceExclude:
        - aws-sdk
    packagerOptions:
      scripts:
        - prisma generate
  serverless-offline:
    httpPort: 4000

package:
  individually: true

plugins:
  - serverless-webpack
  - serverless-offline

functions:
  authorizer:
    handler: src/authorizer.handler
  graphql:
    handler: src/graphql.handler
    events:
      - http:
          path: graphql
          method: post
          cors: true
      - http:
          path: graphql
          method: get
          cors: true
  upload:
    handler: src/upload.getSignedURL
    events:
      - http:
          path: upload
          method: get
          cors: true
          authorizer: authorizer
  preSignUp:
    handler: src/cognito.preSignUp
    events:
      - cognitoUserPool:
          trigger: PreSignUp
          pool: ${self:custom.userPool}
          existing: true
  postConfirmation:
    handler: src/cognito.postConfirmation
    events:
      - cognitoUserPool:
          trigger: PostConfirmation
          pool: ${self:custom.userPool}
          existing: true
  postAuthentication:
    handler: src/cognito.postAuthentication
    events:
      - cognitoUserPool:
          trigger: PostAuthentication
          pool: ${self:custom.userPool}
          existing: true
  preTokenGeneration:
    handler: src/cognito.preTokenGeneration
    events:
      - cognitoUserPool:
          trigger: PreTokenGeneration
          pool: ${self:custom.userPool}
          existing: true

resources:
  Resources:
    PublicUploadBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:custom.bucket}
        CorsConfiguration:
          CorsRules:
            - AllowedHeaders: ['*']
              AllowedMethods: [GET, POST, PUT]
              AllowedOrigins: ['*']
